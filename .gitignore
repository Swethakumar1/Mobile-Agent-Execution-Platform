package Mobile;
import java.io.*;
import java.rmi.*;
import java.util.Arrays;
import java.lang.reflect.*;
/**
* Mobile.Agent is the base class of all user-define mobile agents. It carries
* an agent identifier, the next host IP and port, the name of the function to
* invoke at the next host, arguments passed to this function, its class name,
* and its byte code. It runs as an independent thread that invokes a given
* function upon migrating the next host.
*
* @author SwethaKumar
* @version %I% %G%
* @since 1.0
*/
public class Agent implements Serializable, Runnable {
// live data to carry with the agent upon a migration
protected int agentId = -1; // this agent's identifier
private String _hostname = null; // the next host name to migrate
4
private String _function = null; // the function to invoke upon a move
private int _port = 0; // the next host port to migrate
private String[] _arguments = null; // arguments pass to _function
private String _classname = null; // this agent's class name
private byte[] _bytecode = null; // this agent's byte code
private String[] _message = null;
/**
* setPort( ) sets a port that is used to contact a remote Mobile.Place.
*
* @param port a port to be set.
*/
public void setPort( int port ) {
this._port = port;
}
/**
* setId( ) sets this agent identifier: agentId.
*
* @param id an identifier to set to this agent.
*/
public void setId( int id ) {
this.agentId = id;
}
5
/**
* getId( ) returns this agent identifier: agentId.
*
* @param this agent's identifier.
*/
public int getId( ) {
return agentId;
}
/**
* getByteCode( ) reads a byte code from the file whosename is given in
* "classname.class".
*
* @param classname the name of a class to read from local disk.
* @return a byte code of a given class.
*/
public static byte[] getByteCode( String classname ) {
// create the file name
String filename = classname + ".class";
// allocate the buffer to read this agent's bytecode in
File file = new File( filename );
byte[] bytecode = new byte[( int )file.length( )];
6
// read this agent's bytecode from the file.
try {
BufferedInputStream bis =
new BufferedInputStream( new FileInputStream( filename ) );
bis.read( bytecode, 0, bytecode.length );
bis.close( );
} catch ( Exception e ) {
e.printStackTrace( );
return null;
}
// now you got a byte code from the file. just return it.
return bytecode;
}
/**
* getByteCode( ) reads this agent's byte code from the corresponding file.
*
* @return a byte code of this agent.
*/
public byte[] getByteCode( ) {
if ( _bytecode != null ) // bytecode has been already read from a file
return _bytecode;
7
// obtain this agent's class name and file name
_classname = this.getClass( ).getName( );
_bytecode = getByteCode( _classname );
return _bytecode;
}
